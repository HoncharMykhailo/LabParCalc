
#include <omp.h>
#include <iostream>
#include <string>
#include <atomic>
#include <vector>
#include <chrono>

using namespace std;

std::string charset = "abcdefghijklmnopqrstuvwxyz";

std::atomic<bool> found(false);
std::string result;

bool checkGuess(const std::string& guess, const std::string& target) {
    return guess == target;
}

std::string shiftString(const std::string& s, int shift) {
    int len = s.length();
    if (len == 0) return s;
    shift = shift % len;
    return s.substr(len - shift) + s.substr(0, len - shift);
}

bool generateAndCheck(const std::string& prefix, int maxLength, const std::string& target, long long& counter, string& localResult) {
    if (found.load()) return true;
    if (prefix.length() > maxLength) return false;

    counter++;
    if (counter % 10000 == 0 && prefix.length() == maxLength) {
//#pragma omp critical
      //  cout << "Thread " << omp_get_thread_num() << " trying: " << prefix << endl;
        cout << prefix << endl;
    }

    if (prefix.length() == maxLength) {
        if (checkGuess(prefix, target)) {
            found.store(true);
            localResult = prefix;
            return true;
        }
        return false;
    }

    for (char ch : charset) {
        std::string next = prefix + ch;
        if (generateAndCheck(next, maxLength, target, counter, localResult)) return true;
    }

    return false;
}

int main() {
    string target;
    int maxThreads = omp_get_max_threads();

    cout << "maxThreads = " << maxThreads << "\n";
    cout << "Enter target string: ";
    cin >> target;
    int charsetSize = charset.size();

    auto start = std::chrono::high_resolution_clock::now();

    for (int length = 1; !found.load(); ++length) {
        long long totalCounter = 0;
        vector<string> localResults(maxThreads);

#pragma omp parallel
        {
            int tid = omp_get_thread_num();
            long long counter = 0;

#pragma omp for schedule(dynamic)
            for (int i = 0; i < charsetSize; ++i) {
                string prefix(1, charset[i % charsetSize]);
                if (generateAndCheck(prefix, length, target, counter, localResults[tid])) {
                    found.store(true);
                }
            }

#pragma omp atomic
            totalCounter += counter;
        }

        charset = shiftString(charset, maxThreads);

        for (const auto& res : localResults) {
            if (!res.empty()) {
                result = res;
                break;
            }
        }
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration = end - start;

    cout << "\nPassword found: " << result << endl;
    cout << "Time taken: " << duration.count() << " seconds" << endl;

    return 0;
}
