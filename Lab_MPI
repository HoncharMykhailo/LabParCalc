
#include <mpi.h>
#include <iostream>
#include <string>
#include <cmath>
#include <chrono>
using namespace std;

std::string charset = "abcdefghijklmnopqrstuvwxyz";

int counter = 0;

bool checkGuess(const std::string& guess, const std::string& target) {
    return guess == target;
}

std::string shiftString(const std::string& s, int shift) {
    int len = s.length();
    if (len == 0) return s;
    shift = shift % len;
    return s.substr(len - shift) + s.substr(0, len - shift);
}

bool generateAndCheck(const std::string& prefix, int maxLength, const std::string& target, int rank, int size, long long& counter, int& found, string& result) {
    if (found) return true;
    if (prefix.length() > maxLength) return false;

    int res = 0;

    counter++;
    int out_delay = 1000000;
    if (counter % out_delay == 0 && prefix.length() == maxLength) {
        if (rank > 9)  std::cout << " Process " << rank << " trying: " << prefix << std::endl;
        if (rank < 10) std::cout << " Process  " << rank << " trying: " << prefix << std::endl;
    }

    if (prefix.length() == maxLength) {
        if (checkGuess(prefix, target)) {
            found = rank + 1;
            int sender = rank + 1;
            MPI_Allreduce(&sender, &res, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
            std::cout << "Process " << rank << " found the target: " << prefix << std::endl;
            result = prefix;
            return true;
        }
        else {
            int zero = 0;
            if(counter%1000000==0)
            MPI_Allreduce(&zero, &res, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
        }
    }

    if (res != 0) {
        found = 1;
        return true;
    }

    for (char ch : charset) {
        std::string next = prefix + ch;
        if (generateAndCheck(next, maxLength, target, rank, size, counter, found, result)) return true;
    }

    return false;
}

int main(int argc, char** argv) {
    string result;
    int winner = 0;

    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    


    

    string target;
    int targetLen = 0;

    if (rank == 0) {
        std::cout << "Enter target string: ";
        std::cin >> target;
        targetLen = target.size();
    }

    MPI_Bcast(&targetLen, 1, MPI_INT, 0, MPI_COMM_WORLD);
    if (rank != 0) target.resize(targetLen);
    MPI_Bcast(&target[0], targetLen, MPI_CHAR, 0, MPI_COMM_WORLD);

    int charsetSize = charset.size();
    int found = 0;

    auto start_time = std::chrono::high_resolution_clock::now();
   // start_time = MPI_Wtime();
    for (int length = 1; !found; ++length) {
        long long counter = 0;

        for (int i = rank; i < charsetSize; i += size) {
            string prefix(1, charset[i % charsetSize]);

            if (generateAndCheck(prefix, length, target, rank, size, counter, found, result)) {
                break;
            }
        }

        charset = shiftString(charset, size);
    }
            
      

    int finalWinner = 0;
    MPI_Allreduce(&found, &finalWinner, 1, MPI_INT, MPI_MAX, MPI_COMM_WORLD);

    int prefixLen = result.length();
    finalWinner--;

    if (rank == finalWinner) MPI_Send(&prefixLen, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
    if (rank == 0) MPI_Recv(&prefixLen, 1, MPI_INT, finalWinner, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

    if (rank == finalWinner) MPI_Send(&result[0], prefixLen, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
    if (rank == 0) MPI_Recv(&result[0], prefixLen, MPI_CHAR, finalWinner, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

    if (rank == 0) {
     //   double end_time = MPI_Wtime(); //  Кінець часу
        auto end_time = std::chrono::high_resolution_clock::now();
     //   auto duration = end_time - start_time;

        std::cout << "\n\n" << rank << ": Process " << finalWinner << " found password = ";
        for (int i = 0; i < prefixLen; i++) {
            cout << result[i];
        }
        cout << "\n";
     //   std::cout << "Execution time: " << duration << " seconds.\n"; //  Вивід часу
            std::chrono::duration<double> duration = end_time - start_time;

            if (rank == 0) {
                cout << "Time taken: " << duration.count() << " seconds" << endl;
            }
    }

    MPI_Finalize();
    return 0;
}
